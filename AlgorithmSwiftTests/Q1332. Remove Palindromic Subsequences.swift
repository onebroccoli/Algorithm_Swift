//
//  Q1332. Remove Palindromic Subsequences.swift
//  AlgorithmSwiftTests
//
//  Created by Sophia Zhu on 6/8/22.
//
/*
 1332. Remove Palindromic Subsequences

 You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
 Return the minimum number of steps to make the given string empty.
 A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
 A string is called palindrome if is one that reads the same backward as well as forward.
  
 Example 1:
 Input: s = "ababa"
 Output: 1
 Explanation: s is already a palindrome, so its entirety can be removed in a single step.

 Example 2:
 Input: s = "abb"
 Output: 2
 Explanation: "abb" -> "bb" -> "".
 Remove palindromic subsequence "a" then "bb".

 Example 3:
 Input: s = "baabb"
 Output: 2
 Explanation: "baabb" -> "b" -> "".
 Remove palindromic subsequence "baab" then "b".


 */
import XCTest
private class Solution {
    
    //method 1: reverse the string
    func removePalindromeSub(_ s: String) -> Int {
        return s == String(s.reversed()) ? 1: 2
    }
    
    //method 2: two pointers
func removePalindromeSub2(_ s: String) -> Int {
    if s.isEmpty {
        return 0
    }
    return isPalindrome(s) ? 1 : 2
    
}
    
    private func isPalindrome(_ s: String) -> Bool {
        var left = 0
        var right = s.count - 1
        var chars = Array(s)
        while left < right {
            if chars[left] != chars[right] {return false}
            left += 1
            right -= 1
        }
        return true
    }
    
    
}
class Q1332__Remove_Palindromic_Subsequences: XCTestCase {

    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    func testExample() throws {
        // This is an example of a functional test case.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
        // Any test you write for XCTest can be annotated as throws and async.
        // Mark your test throws to produce an unexpected failure when your test encounters an uncaught error.
        // Mark your test async to allow awaiting for asynchronous code to complete. Check the results with assertions afterwards.
    }

    func testPerformanceExample() throws {
        // This is an example of a performance test case.
        self.measure {
            // Put the code you want to measure the time of here.
        }
    }

}
